#!/usr/bin/perl

use Carp;
use File::Spec;
use DBI;

$dbh = DBI->connect("dbi:Pg:dbname=quizmaker")
    or die;

$dbh->begin_work();

while (@ARGV) {
    $file = shift @ARGV;
    #print "$file\n";

	$file = File::Spec->rel2abs($file);

#	open(IN_FILE, "< $file")
#		or die "Unable to open $file $!\n";

    our ($qworklines, $question, $answer, $short_desc, $par_time, @tags);
        #, $worklines, $uuid,
        # $ref, $author);

    require $file;

    # The rest of the variables are missing in the old format

    unless (defined $qworklines) {
        $qworklines = 4;
    }

    # unique id as an md5sum
    #$x = `md5sum $file`;
    #@xs = split /[\s]+/, $x;
    #$uuid = $xs[0];

    @stat = stat $file;
    # mtime
    $mtime = $stat[9];
    $mtime = localtime $mtime;
    print "$mtime\n";

    $uuid = "[jmm] $mtime";

#    use Data::Dumper;
#    print Dumper(@stat);

    $author =
'Jeremiah Mahler <jmmahler@gmail.com>
http://www.google.com/profiles/jmmahler#about';

#$nworklines = 4;

    $ref = "Problems from Assembly Language Programming (CSCI-10) taught by Boyd Trolinger at Butte College in 2009.";

    # all data values defined, ready to insert data

    $insert_problem_sql =
        "INSERT INTO Problems (nworklines, short_desc, question, answer, par_time, uuid, ref, author) VALUES (?, ?, ?, ?, ?, ?, ?, ?); ";
        #"INSERT INTO Problems (dsc, file, par_time, uuid, ref, author) VALUES (?, ?, ?, ?, ?, ?); ";
    $insert_problem_sth = $dbh->prepare_cached($insert_problem_sql);

    $res = $insert_problem_sth->execute(
                $qworklines,
                $short_desc,
                $question,
                $answer,
                $par_time,
                $uuid,
                $ref,
                $author,
            );

    unless ($res) {
        carp "Unable to INSERT problem.";
        $dbh->rollback();
        die;
    }

    $problem_id = $dbh->last_insert_id(undef, undef, "problems", undef);

    foreach my $tag (@tags) {

        my $ins_ptag_sql = "INSERT INTO ProblemTags (problem_id, tag) VALUES (?, ?);";
        my $rv = $dbh->do($ins_ptag_sql, {}, $problem_id, $tag);
        unless ($rv) {
            carp "Error trying to INSERT to ProblemTags.";
            $dbh->rollback();
            die;
        }

    }

}

#$dbh->rollback();
$dbh->commit();

#!/usr/bin/perl
use strict;

use QuizMaker;

unless (@ARGV) {
my $prog_name = (split /\//, $0)[-1];

print <<"USAGE";

USAGE:
  $prog_name <option> <sub-options>
  
OPTIONS:
  -listtags <files>                       # List all unique tags from the files.

  -findtags -tags <tags> -files <files>   # Find problems with ALL the tags.
                                          # Tags are separated by spaces.
                                          # Tags with spaces or special characters
                                          # in name should be quoted.

  -testtags <test>                        # List the tags the test is composed of

USAGE
}

my ($cmd) = shift @ARGV;

# {{{ -listtags
if ($cmd eq '-listtags') {
	my %uniq_tags;

	# the rest of the @ARGV's are file names
	# Find all the unique tags from these problems.
	foreach my $file (@ARGV) {
		my $qzm = QuizMaker::Problem->load_file($file);	

		if (! defined $qzm) {
			print STDERR "error loading problem from file '$file', skipping.\n";
			next;
		}

		my @tags = @{$qzm->{tags}};
		map { $uniq_tags{$_} = 1; } @tags;
	}

	# display the unique tags

	print "TAGS:\n";
	foreach my $tag (keys %uniq_tags) {
		print " $tag\n";
	}
}
# }}}

# {{{ -findtags
elsif ($cmd eq '-findtags') {
	my @files_wtags; # files with all the given tags

	# tags and files from arguments
	my @req_tags;
	my @files;

	my $mode;  # 'tag' or 'file'
	foreach my $arg (@ARGV) {
		# look for commands to switch the "mode"
		if ($arg =~ /^-files?$/) {
			$mode = 'file';
			next;
		} elsif ($arg =~ /^-tags?$/) {
			$mode = 'tag';
			next;
		} # else stay in current mode

		if ($mode eq 'file') {
			push @files, $arg;
		} elsif ($mode eq 'tag') {
			push @req_tags, $arg;
		} else {
			print STDERR "malformed argument '$arg' not preceeded by a ".
							"'-file' or -tag'\n";
		}
	}

	# Scan the files and print the file name if it has
	# all the tags.
	print "FILES:\n";
	foreach my $file (@files) {
		my $qzm = QuizMaker::Problem->load_file($file);	

		if (! defined $qzm) {
			print STDERR "error loading problem from file '$file', skipping.\n";
			next;
		}

		my @tags = @{$qzm->{tags}};

		my $all_found = 1;
		foreach my $req_tag (@req_tags) {
			my $found = 0;  # default not found
			foreach my $tag (@tags) {
				if ($tag eq $req_tag) {
					$found = 1;
				}
			}
			if (0 == $found) {
				$all_found = 0;
				last;
			}
		}

		if ($all_found) {
			print "  $file\n";
		}
	}
}
# }}}

# {{{ -testtags
elsif ($cmd eq '-testtags') {

	my $test_file = shift @ARGV;

	my $qzmt = QuizMaker::Test->load_file($test_file);
	exit 1 if (! $qzmt);

	my @problems = @{$qzmt->{'problems'}};  # problem objects

	my %tag_counts;
	my $total_tags = 0;

	foreach my $problem (@problems) {
		my @tags = @{$problem->{tags}};

		foreach my $tag (@tags) {
			if (exists $tag_counts{$tag}) {
				$tag_counts{$tag} += 1;
			} else {
				$tag_counts{$tag} = 1;
			}
			$total_tags++;
		}
	}

	print "    %      count     tag\n";
	print "  -----    -----     ---\n";
	if ($total_tags > 0) {
		foreach my $tag (keys %tag_counts) {
			my $pcnt = ($tag_counts{$tag} / $total_tags) * 100;
			printf("%7.2f   %5.d", $pcnt, $tag_counts{$tag});
			print "      $tag\n";
		}
	} else {
		print "(0 tags)\n";
	}

}
# }}}

